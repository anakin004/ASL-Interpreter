{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ryan\\\\code\\\\AI\\\\ASL\\\\my-ai-app\\\\src\\\\CameraComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport './CameraComponent.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CameraComponent = () => {\n  _s();\n  const videoRef = useRef(null);\n  const [isSending, setIsSending] = useState(false);\n  const [cap, setCap] = useState(null); // OpenCV VideoCapture object\n  const intervalId = useRef(null); // Store the interval ID\n\n  const getVideo = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: true\n      });\n      videoRef.current.srcObject = stream;\n\n      // Initialize OpenCV VideoCapture\n      const video = document.createElement('video');\n      video.srcObject = stream;\n      video.play();\n\n      // Create a VideoCapture object\n      const cv = window.cv; // Use window.cv to access OpenCV\n      setCap(new cv.VideoCapture(video));\n    } catch (error) {\n      console.error(\"Error accessing webcam:\", error);\n    }\n  };\n  const sendFrame = async () => {\n    if (cap) {\n      const frame = new window.cv.Mat(videoRef.current.videoHeight, videoRef.current.videoWidth, window.cv.CV_8UC4);\n      cap.read(frame); // Capture a frame\n\n      // Log frame data to check if capturing is successful\n      console.log(\"Frame captured:\", frame);\n\n      // Convert the frame to a Base64 string\n      const data = frame.toString(); // Make sure to convert it correctly\n\n      // Log the data being sent\n      console.log(\"Sending data:\", data);\n      try {\n        const response = await fetch('http://localhost:5000/video_feed', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            image: data\n          }) // Send the image data\n        });\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        const result = await response.json();\n        console.log(\"Frame processed:\", result);\n      } catch (error) {\n        console.error('Error sending frame:', error);\n      } finally {\n        frame.delete(); // Clean up\n      }\n    } else {\n      console.error(\"VideoCapture is not initialized.\");\n    }\n  };\n  useEffect(() => {\n    getVideo();\n\n    // Cleanup function to clear interval and OpenCV capture\n    return () => {\n      if (intervalId.current) {\n        clearInterval(intervalId.current); // Clear the interval\n      }\n      if (cap) {\n        cap.delete(); // Clean up OpenCV VideoCapture\n      }\n    };\n  }, []);\n  const handleStart = () => {\n    if (!isSending) {\n      console.log(\"Starting frame sending...\");\n      setIsSending(true);\n      intervalId.current = setInterval(sendFrame, 33); // ~30 FPS\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"camera-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"video\", {\n      ref: videoRef,\n      autoPlay: true,\n      className: \"camera-feed\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleStart,\n      disabled: isSending,\n      style: {\n        backgroundColor: isSending ? 'darkgray' : 'blue',\n        color: 'white',\n        cursor: isSending ? 'not-allowed' : 'pointer'\n      },\n      children: isSending ? 'Sending...' : 'Start Sending Frames'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 9\n  }, this);\n};\n_s(CameraComponent, \"BBZrKgF+9biPGGKWpwvtpbY2uZI=\");\n_c = CameraComponent;\nexport default CameraComponent;\nvar _c;\n$RefreshReg$(_c, \"CameraComponent\");","map":{"version":3,"names":["React","useEffect","useRef","useState","jsxDEV","_jsxDEV","CameraComponent","_s","videoRef","isSending","setIsSending","cap","setCap","intervalId","getVideo","stream","navigator","mediaDevices","getUserMedia","video","current","srcObject","document","createElement","play","cv","window","VideoCapture","error","console","sendFrame","frame","Mat","videoHeight","videoWidth","CV_8UC4","read","log","data","toString","response","fetch","method","headers","body","JSON","stringify","image","ok","Error","result","json","delete","clearInterval","handleStart","setInterval","className","children","ref","autoPlay","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","style","backgroundColor","color","cursor","_c","$RefreshReg$"],"sources":["C:/Users/Ryan/code/AI/ASL/my-ai-app/src/CameraComponent.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport './CameraComponent.css';\r\n\r\nconst CameraComponent = () => {\r\n    const videoRef = useRef(null);\r\n    const [isSending, setIsSending] = useState(false);\r\n    const [cap, setCap] = useState(null); // OpenCV VideoCapture object\r\n    const intervalId = useRef(null); // Store the interval ID\r\n\r\n    const getVideo = async () => {\r\n        try {\r\n            const stream = await navigator.mediaDevices.getUserMedia({ video: true });\r\n            videoRef.current.srcObject = stream;\r\n\r\n            // Initialize OpenCV VideoCapture\r\n            const video = document.createElement('video');\r\n            video.srcObject = stream;\r\n            video.play();\r\n\r\n            // Create a VideoCapture object\r\n            const cv = window.cv; // Use window.cv to access OpenCV\r\n            setCap(new cv.VideoCapture(video));\r\n        } catch (error) {\r\n            console.error(\"Error accessing webcam:\", error);\r\n        }\r\n    };\r\n\r\n    const sendFrame = async () => {\r\n        if (cap) {\r\n            const frame = new window.cv.Mat(videoRef.current.videoHeight, videoRef.current.videoWidth, window.cv.CV_8UC4);\r\n            cap.read(frame); // Capture a frame\r\n\r\n            // Log frame data to check if capturing is successful\r\n            console.log(\"Frame captured:\", frame);\r\n\r\n            // Convert the frame to a Base64 string\r\n            const data = frame.toString(); // Make sure to convert it correctly\r\n\r\n            // Log the data being sent\r\n            console.log(\"Sending data:\", data);\r\n\r\n            try {\r\n                const response = await fetch('http://localhost:5000/video_feed', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                    body: JSON.stringify({ image: data }), // Send the image data\r\n                });\r\n\r\n                if (!response.ok) {\r\n                    throw new Error('Network response was not ok');\r\n                }\r\n\r\n                const result = await response.json();\r\n                console.log(\"Frame processed:\", result);\r\n            } catch (error) {\r\n                console.error('Error sending frame:', error);\r\n            } finally {\r\n                frame.delete(); // Clean up\r\n            }\r\n        } else {\r\n            console.error(\"VideoCapture is not initialized.\");\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        getVideo();\r\n\r\n        // Cleanup function to clear interval and OpenCV capture\r\n        return () => {\r\n            if (intervalId.current) {\r\n                clearInterval(intervalId.current); // Clear the interval\r\n            }\r\n            if (cap) {\r\n                cap.delete(); // Clean up OpenCV VideoCapture\r\n            }\r\n        };\r\n    }, []);\r\n\r\n    const handleStart = () => {\r\n        if (!isSending) {\r\n            console.log(\"Starting frame sending...\");\r\n            setIsSending(true);\r\n            intervalId.current = setInterval(sendFrame, 33); // ~30 FPS\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"camera-container\">\r\n            <video ref={videoRef} autoPlay className=\"camera-feed\" />\r\n            <button \r\n                onClick={handleStart} \r\n                disabled={isSending} \r\n                style={{\r\n                    backgroundColor: isSending ? 'darkgray' : 'blue',\r\n                    color: 'white',\r\n                    cursor: isSending ? 'not-allowed' : 'pointer',\r\n                }}\r\n            >\r\n                {isSending ? 'Sending...' : 'Start Sending Frames'}\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CameraComponent;\r\n\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,OAAO,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/B,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAMC,QAAQ,GAAGN,MAAM,CAAC,IAAI,CAAC;EAC7B,MAAM,CAACO,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACQ,GAAG,EAAEC,MAAM,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EACtC,MAAMU,UAAU,GAAGX,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;;EAEjC,MAAMY,QAAQ,GAAG,MAAAA,CAAA,KAAY;IACzB,IAAI;MACA,MAAMC,MAAM,GAAG,MAAMC,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;QAAEC,KAAK,EAAE;MAAK,CAAC,CAAC;MACzEX,QAAQ,CAACY,OAAO,CAACC,SAAS,GAAGN,MAAM;;MAEnC;MACA,MAAMI,KAAK,GAAGG,QAAQ,CAACC,aAAa,CAAC,OAAO,CAAC;MAC7CJ,KAAK,CAACE,SAAS,GAAGN,MAAM;MACxBI,KAAK,CAACK,IAAI,CAAC,CAAC;;MAEZ;MACA,MAAMC,EAAE,GAAGC,MAAM,CAACD,EAAE,CAAC,CAAC;MACtBb,MAAM,CAAC,IAAIa,EAAE,CAACE,YAAY,CAACR,KAAK,CAAC,CAAC;IACtC,CAAC,CAAC,OAAOS,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IACnD;EACJ,CAAC;EAED,MAAME,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC1B,IAAInB,GAAG,EAAE;MACL,MAAMoB,KAAK,GAAG,IAAIL,MAAM,CAACD,EAAE,CAACO,GAAG,CAACxB,QAAQ,CAACY,OAAO,CAACa,WAAW,EAAEzB,QAAQ,CAACY,OAAO,CAACc,UAAU,EAAER,MAAM,CAACD,EAAE,CAACU,OAAO,CAAC;MAC7GxB,GAAG,CAACyB,IAAI,CAACL,KAAK,CAAC,CAAC,CAAC;;MAEjB;MACAF,OAAO,CAACQ,GAAG,CAAC,iBAAiB,EAAEN,KAAK,CAAC;;MAErC;MACA,MAAMO,IAAI,GAAGP,KAAK,CAACQ,QAAQ,CAAC,CAAC,CAAC,CAAC;;MAE/B;MACAV,OAAO,CAACQ,GAAG,CAAC,eAAe,EAAEC,IAAI,CAAC;MAElC,IAAI;QACA,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,kCAAkC,EAAE;UAC7DC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACL,cAAc,EAAE;UACpB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YAAEC,KAAK,EAAET;UAAK,CAAC,CAAC,CAAE;QAC3C,CAAC,CAAC;QAEF,IAAI,CAACE,QAAQ,CAACQ,EAAE,EAAE;UACd,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;QAClD;QAEA,MAAMC,MAAM,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;QACpCtB,OAAO,CAACQ,GAAG,CAAC,kBAAkB,EAAEa,MAAM,CAAC;MAC3C,CAAC,CAAC,OAAOtB,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAChD,CAAC,SAAS;QACNG,KAAK,CAACqB,MAAM,CAAC,CAAC,CAAC,CAAC;MACpB;IACJ,CAAC,MAAM;MACHvB,OAAO,CAACD,KAAK,CAAC,kCAAkC,CAAC;IACrD;EACJ,CAAC;EAED3B,SAAS,CAAC,MAAM;IACZa,QAAQ,CAAC,CAAC;;IAEV;IACA,OAAO,MAAM;MACT,IAAID,UAAU,CAACO,OAAO,EAAE;QACpBiC,aAAa,CAACxC,UAAU,CAACO,OAAO,CAAC,CAAC,CAAC;MACvC;MACA,IAAIT,GAAG,EAAE;QACLA,GAAG,CAACyC,MAAM,CAAC,CAAC,CAAC,CAAC;MAClB;IACJ,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EAEN,MAAME,WAAW,GAAGA,CAAA,KAAM;IACtB,IAAI,CAAC7C,SAAS,EAAE;MACZoB,OAAO,CAACQ,GAAG,CAAC,2BAA2B,CAAC;MACxC3B,YAAY,CAAC,IAAI,CAAC;MAClBG,UAAU,CAACO,OAAO,GAAGmC,WAAW,CAACzB,SAAS,EAAE,EAAE,CAAC,CAAC,CAAC;IACrD;EACJ,CAAC;EAED,oBACIzB,OAAA;IAAKmD,SAAS,EAAC,kBAAkB;IAAAC,QAAA,gBAC7BpD,OAAA;MAAOqD,GAAG,EAAElD,QAAS;MAACmD,QAAQ;MAACH,SAAS,EAAC;IAAa;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACzD1D,OAAA;MACI2D,OAAO,EAAEV,WAAY;MACrBW,QAAQ,EAAExD,SAAU;MACpByD,KAAK,EAAE;QACHC,eAAe,EAAE1D,SAAS,GAAG,UAAU,GAAG,MAAM;QAChD2D,KAAK,EAAE,OAAO;QACdC,MAAM,EAAE5D,SAAS,GAAG,aAAa,GAAG;MACxC,CAAE;MAAAgD,QAAA,EAEDhD,SAAS,GAAG,YAAY,GAAG;IAAsB;MAAAmD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9C,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACR,CAAC;AAEd,CAAC;AAACxD,EAAA,CArGID,eAAe;AAAAgE,EAAA,GAAfhE,eAAe;AAuGrB,eAAeA,eAAe;AAAC,IAAAgE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}