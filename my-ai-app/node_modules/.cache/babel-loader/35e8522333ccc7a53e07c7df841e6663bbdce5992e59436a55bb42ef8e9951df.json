{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ryan\\\\code\\\\AI\\\\ASL\\\\my-ai-app\\\\src\\\\CameraComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CameraComponent = () => {\n  _s();\n  const videoRef = useRef(null);\n  const canvasRef = useRef(null);\n  const [isStreaming, setIsStreaming] = useState(false);\n\n  // Function to start the video stream\n  const startVideo = async () => {\n    const stream = await navigator.mediaDevices.getUserMedia({\n      video: true\n    });\n    videoRef.current.srcObject = stream;\n    setIsStreaming(true); // Set streaming to true once video starts\n  };\n\n  // Function to send the frame to your prediction API\n  const sendFrame = async () => {\n    // Get the canvas context\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n\n    // Draw the video frame onto the canvas\n    context.drawImage(videoRef.current, 0, 0, canvas.width, canvas.height);\n\n    // Convert the canvas to a data URL\n    const imageData = canvas.toDataURL('image/jpeg');\n\n    // Send the image data to your prediction API\n    // Example:\n    await fetch('/video_feed', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        image: imageData\n      })\n    });\n  };\n  useEffect(() => {\n    // Start the video feed when the component mounts\n    startVideo();\n\n    // Set an interval to continuously send frames for prediction\n    let intervalId;\n    if (isStreaming) {\n      intervalId = setInterval(sendFrame, 1000); // Send frame every second\n    }\n\n    // Clean up function to clear the interval\n    return () => {\n      if (intervalId) {\n        clearInterval(intervalId);\n      }\n    };\n  }, [isStreaming]); // Only run when isStreaming changes\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"camera-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"video\", {\n      ref: videoRef,\n      autoPlay: true,\n      className: \"camera-feed\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: 640,\n      height: 480,\n      style: {\n        display: 'none'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), !isStreaming && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startVideo,\n      children: \"Start Video\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 30\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n};\n_s(CameraComponent, \"pUqhEnWvxkaf5eSoAPqxbg9HqcM=\");\n_c = CameraComponent;\nexport default CameraComponent;\nvar _c;\n$RefreshReg$(_c, \"CameraComponent\");","map":{"version":3,"names":["React","useRef","useEffect","useState","jsxDEV","_jsxDEV","CameraComponent","_s","videoRef","canvasRef","isStreaming","setIsStreaming","startVideo","stream","navigator","mediaDevices","getUserMedia","video","current","srcObject","sendFrame","canvas","context","getContext","drawImage","width","height","imageData","toDataURL","fetch","method","headers","body","JSON","stringify","image","intervalId","setInterval","clearInterval","className","children","ref","autoPlay","fileName","_jsxFileName","lineNumber","columnNumber","style","display","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Ryan/code/AI/ASL/my-ai-app/src/CameraComponent.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\r\n\r\nconst CameraComponent = () => {\r\n    const videoRef = useRef(null);\r\n    const canvasRef = useRef(null);\r\n    const [isStreaming, setIsStreaming] = useState(false);\r\n    \r\n    // Function to start the video stream\r\n    const startVideo = async () => {\r\n        const stream = await navigator.mediaDevices.getUserMedia({ video: true });\r\n        videoRef.current.srcObject = stream;\r\n        setIsStreaming(true); // Set streaming to true once video starts\r\n    };\r\n\r\n    // Function to send the frame to your prediction API\r\n    const sendFrame = async () => {\r\n        // Get the canvas context\r\n        const canvas = canvasRef.current;\r\n        const context = canvas.getContext('2d');\r\n\r\n        // Draw the video frame onto the canvas\r\n        context.drawImage(videoRef.current, 0, 0, canvas.width, canvas.height);\r\n\r\n        // Convert the canvas to a data URL\r\n        const imageData = canvas.toDataURL('image/jpeg');\r\n\r\n        // Send the image data to your prediction API\r\n        // Example:\r\n        await fetch('/video_feed', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({ image: imageData }),\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        // Start the video feed when the component mounts\r\n        startVideo();\r\n\r\n        // Set an interval to continuously send frames for prediction\r\n        let intervalId;\r\n        if (isStreaming) {\r\n            intervalId = setInterval(sendFrame, 1000); // Send frame every second\r\n        }\r\n\r\n        // Clean up function to clear the interval\r\n        return () => {\r\n            if (intervalId) {\r\n                clearInterval(intervalId);\r\n            }\r\n        };\r\n    }, [isStreaming]); // Only run when isStreaming changes\r\n\r\n    return (\r\n        <div className=\"camera-container\">\r\n            <video ref={videoRef} autoPlay className=\"camera-feed\" />\r\n            <canvas ref={canvasRef} width={640} height={480} style={{ display: 'none' }} />\r\n            {!isStreaming && <button onClick={startVideo}>Start Video</button>} {/* Button to start video stream */}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CameraComponent;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}