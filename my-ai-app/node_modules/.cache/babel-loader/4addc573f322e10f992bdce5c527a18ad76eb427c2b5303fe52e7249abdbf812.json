{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ryan\\\\code\\\\AI\\\\ASL\\\\my-ai-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PredictionComponent = () => {\n  _s();\n  // State variables to hold input data and predictions\n  const [input, setInput] = useState([0.0, 0.0, 0.0]); // Example input values\n  const [prediction, setPrediction] = useState(null);\n  const [error, setError] = useState(null);\n\n  // Function to handle input changes\n  const handleInputChange = (e, index) => {\n    const newInput = [...input];\n    newInput[index] = parseFloat(e.target.value); // Parse input as float\n    setInput(newInput);\n  };\n\n  // Function to make the prediction request\n  const handlePredict = async () => {\n    try {\n      const response = await fetch('http://localhost:5000/predict', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          input\n        }) // Send input data as JSON\n      });\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const data = await response.json(); // Convert response to JSON\n      setPrediction(data.prediction); // Set the prediction state\n      setError(null); // Clear any previous errors\n    } catch (err) {\n      console.error('Error:', err);\n      setError('An error occurred while fetching the prediction.'); // Set error state\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"AI Model Prediction\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Input 1:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: input[0],\n          onChange: e => handleInputChange(e, 0)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Input 2:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: input[1],\n          onChange: e => handleInputChange(e, 1)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Input 3:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: input[2],\n          onChange: e => handleInputChange(e, 2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handlePredict,\n      children: \"Predict\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), prediction && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Prediction Result:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: JSON.stringify(prediction)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 21\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 17\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Error:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 21\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n};\n_s(PredictionComponent, \"KxqSPWTSODHQuJvtZpVFLtLMku4=\");\n_c = PredictionComponent;\nexport default PredictionComponent;\nvar _c;\n$RefreshReg$(_c, \"PredictionComponent\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","PredictionComponent","_s","input","setInput","prediction","setPrediction","error","setError","handleInputChange","e","index","newInput","parseFloat","target","value","handlePredict","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","err","console","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Ryan/code/AI/ASL/my-ai-app/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\n\nconst PredictionComponent = () => {\n    // State variables to hold input data and predictions\n    const [input, setInput] = useState([0.0, 0.0, 0.0]); // Example input values\n    const [prediction, setPrediction] = useState(null);\n    const [error, setError] = useState(null);\n\n    // Function to handle input changes\n    const handleInputChange = (e, index) => {\n        const newInput = [...input];\n        newInput[index] = parseFloat(e.target.value); // Parse input as float\n        setInput(newInput);\n    };\n\n    // Function to make the prediction request\n    const handlePredict = async () => {\n        try {\n            const response = await fetch('http://localhost:5000/predict', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ input }), // Send input data as JSON\n            });\n\n            if (!response.ok) {\n                throw new Error('Network response was not ok');\n            }\n\n            const data = await response.json(); // Convert response to JSON\n            setPrediction(data.prediction); // Set the prediction state\n            setError(null); // Clear any previous errors\n        } catch (err) {\n            console.error('Error:', err);\n            setError('An error occurred while fetching the prediction.'); // Set error state\n        }\n    };\n\n    return (\n        <div>\n            <h1>AI Model Prediction</h1>\n            <div>\n                <label>\n                    Input 1:\n                    <input\n                        type=\"number\"\n                        value={input[0]}\n                        onChange={(e) => handleInputChange(e, 0)}\n                    />\n                </label>\n                <label>\n                    Input 2:\n                    <input\n                        type=\"number\"\n                        value={input[1]}\n                        onChange={(e) => handleInputChange(e, 1)}\n                    />\n                </label>\n                <label>\n                    Input 3:\n                    <input\n                        type=\"number\"\n                        value={input[2]}\n                        onChange={(e) => handleInputChange(e, 2)}\n                    />\n                </label>\n            </div>\n            <button onClick={handlePredict}>Predict</button>\n\n            {prediction && (\n                <div>\n                    <h2>Prediction Result:</h2>\n                    <p>{JSON.stringify(prediction)}</p> {/* Display prediction */}\n                </div>\n            )}\n\n            {error && (\n                <div>\n                    <h2>Error:</h2>\n                    <p>{error}</p> {/* Display error message */}\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default PredictionComponent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}