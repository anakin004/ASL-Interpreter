{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ryan\\\\code\\\\AI\\\\ASL\\\\my-ai-app\\\\src\\\\CameraComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport './CameraComponent.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CameraComponent = () => {\n  _s();\n  const videoRef = useRef(null);\n  const canvasRef = useRef(null);\n  const [isSending, setIsSending] = useState(false); // State to control frame sending\n  let intervalId = useRef(null); // Use ref to store interval ID\n\n  // Function to get access to the webcam\n  const getVideo = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: true\n      });\n      videoRef.current.srcObject = stream;\n    } catch (error) {\n      console.error(\"Error accessing webcam:\", error);\n    }\n  };\n\n  // Function to send the captured frame to the backend\n  const sendFrame = async () => {\n    const canvas = canvasRef.current;\n    const video = videoRef.current;\n\n    // Set canvas dimensions to match the video feed\n    canvas.width = video.videoWidth;\n    canvas.height = video.videoHeight;\n\n    // Draw the video frame to the canvas\n    const context = canvas.getContext('2d');\n    context.drawImage(video, 0, 0, canvas.width, canvas.height);\n\n    // Convert the canvas content to a Base64 string\n    const data = canvas.toDataURL('image/jpeg');\n    console.log(\"Sending frame...\"); // Log to check if this runs\n    try {\n      const response = await fetch('http://localhost:5000/video_feed', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          image: data\n        }) // Send the image data\n      });\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const result = await response.json();\n      console.log(\"Frame processed:\", result); // Handle the backend response\n    } catch (error) {\n      console.error('Error sending frame:', error);\n    }\n  };\n\n  // UseEffect for setting up video feed\n  useEffect(() => {\n    getVideo(); // Start video feed\n\n    // Clean up the interval on component unmount\n    return () => {\n      clearInterval(intervalId.current);\n    };\n  }, []); // Only run once on mount\n\n  // Function to start sending frames\n  const handleStart = () => {\n    if (!isSending) {\n      setIsSending(true); // Update state to indicate sending has started\n      intervalId.current = setInterval(sendFrame, 1000); // Send frame every second\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"camera-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"video\", {\n      ref: videoRef,\n      autoPlay: true,\n      className: \"camera-feed\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      style: {\n        display: 'none'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleStart,\n      children: \"Start Sending Frames\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 9\n  }, this);\n};\n_s(CameraComponent, \"HsQzhSFcVZPCR2clKkvJn/BqOT8=\");\n_c = CameraComponent;\nexport default CameraComponent;\nvar _c;\n$RefreshReg$(_c, \"CameraComponent\");","map":{"version":3,"names":["React","useEffect","useRef","useState","jsxDEV","_jsxDEV","CameraComponent","_s","videoRef","canvasRef","isSending","setIsSending","intervalId","getVideo","stream","navigator","mediaDevices","getUserMedia","video","current","srcObject","error","console","sendFrame","canvas","width","videoWidth","height","videoHeight","context","getContext","drawImage","data","toDataURL","log","response","fetch","method","headers","body","JSON","stringify","image","ok","Error","result","json","clearInterval","handleStart","setInterval","className","children","ref","autoPlay","fileName","_jsxFileName","lineNumber","columnNumber","style","display","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Ryan/code/AI/ASL/my-ai-app/src/CameraComponent.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport './CameraComponent.css';\r\n\r\nconst CameraComponent = () => {\r\n    const videoRef = useRef(null);\r\n    const canvasRef = useRef(null);\r\n    const [isSending, setIsSending] = useState(false); // State to control frame sending\r\n    let intervalId = useRef(null); // Use ref to store interval ID\r\n\r\n    // Function to get access to the webcam\r\n    const getVideo = async () => {\r\n        try {\r\n            const stream = await navigator.mediaDevices.getUserMedia({\r\n                video: true,\r\n            });\r\n            videoRef.current.srcObject = stream;\r\n        } catch (error) {\r\n            console.error(\"Error accessing webcam:\", error);\r\n        }\r\n    };\r\n\r\n    // Function to send the captured frame to the backend\r\n    const sendFrame = async () => {\r\n        const canvas = canvasRef.current;\r\n        const video = videoRef.current;\r\n\r\n        // Set canvas dimensions to match the video feed\r\n        canvas.width = video.videoWidth;\r\n        canvas.height = video.videoHeight;\r\n\r\n        // Draw the video frame to the canvas\r\n        const context = canvas.getContext('2d');\r\n        context.drawImage(video, 0, 0, canvas.width, canvas.height);\r\n        \r\n        // Convert the canvas content to a Base64 string\r\n        const data = canvas.toDataURL('image/jpeg');\r\n\r\n        console.log(\"Sending frame...\"); // Log to check if this runs\r\n        try {\r\n            const response = await fetch('http://localhost:5000/video_feed', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ image: data }), // Send the image data\r\n            });\r\n    \r\n            if (!response.ok) {\r\n                throw new Error('Network response was not ok');\r\n            }\r\n    \r\n            const result = await response.json();\r\n            console.log(\"Frame processed:\", result); // Handle the backend response\r\n        } catch (error) {\r\n            console.error('Error sending frame:', error);\r\n        }\r\n    };\r\n\r\n    // UseEffect for setting up video feed\r\n    useEffect(() => {\r\n        getVideo(); // Start video feed\r\n\r\n        // Clean up the interval on component unmount\r\n        return () => {\r\n            clearInterval(intervalId.current);\r\n        };\r\n    }, []); // Only run once on mount\r\n\r\n    // Function to start sending frames\r\n    const handleStart = () => {\r\n        if (!isSending) {\r\n            setIsSending(true); // Update state to indicate sending has started\r\n            intervalId.current = setInterval(sendFrame, 1000); // Send frame every second\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"camera-container\">\r\n            <video ref={videoRef} autoPlay className=\"camera-feed\" />\r\n            <canvas ref={canvasRef} style={{ display: 'none' }} /> {/* Hidden canvas for drawing */}\r\n            <button onClick={handleStart}>Start Sending Frames</button> {/* Button to start sending frames */}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CameraComponent;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}